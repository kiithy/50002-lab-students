.include "8clocks.jsim"
.include "nominal.jsim"

* 2-input nand: inputs are a and b, output is z
.subckt nand2 a b z
MPD1 z a 1 0 NENH sw=8 sl=1
MPD2 1 b 0 0 NENH sw=8 sl=1
MPU1 z a vdd vdd PENH sw=9 sl=1
MPU2 z b vdd vdd PENH sw=9 sl=1
.ends

* inverter: input is a, output is z
.subckt inv a z
MPD1 z a 0 0 NENH sw=16 sl=1
MPU1 z a vdd vdd PENH sw=16 sl=1
.ends

* 2-input nor: inputs are a and b, output is z
.subckt nor2 a b z
MPD1 z a 0 0 NENH sw=8 sl=1
MPD2 z b 0 0 NENH sw=8 sl=1
MPU1 z a 1 vdd PENH sw=9 sl=1
MPU2 1 b vdd vdd PENH sw=9 sl=1
.ends

* 2-input xor: input is a and b, output is z
.subckt xor2 a b z
* Build your own xor gate here
* BEGIN ANSWER
Xnorinput a b c nor2
MPD1 1 b 0 0 NENH sw=2 sl=1
MPD2 z a 1 0 NENH sw=2 sl=2

MPU1 z c 2 vdd PENH sw=4 sl=1
MPU2 2 a vdd vdd PENH sw =4 sl=1

MPD3 z c 0 0 NENH sw=2 sl=1
MPU3 2 b vdd vdd PENH sw=4 sl= 1 

*END ANSWER
.ends

* 2-input xnor: input is a and b, output is z
.subckt xnor2 a b z
* Build your own xnor gate here
* BEGIN ANSWER
Xnandinput a b c nand2

MPD1 1 b 0 0 NENH sw=2 sl=1
MPD2 z c 1 0 NENH sw=2 sl=1
MPU1 z c vdd vdd PENH sw=4 sl=1

MPD3 1 a 0 0 NENH sw=2 sl=1
MPU2 z a 2 vdd PENH sw=4 sl=1 
MPU3 2 b vdd vdd PENH sw=4 sl=1


*END ANSWER
.ends


* test the XOR gate
Xtestxor clk1 clk2 xorout xor2

.tran 40ns
.plot L(clk1)
.plot L(clk2)
.plot L(xorout)
